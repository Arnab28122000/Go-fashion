{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: `${process.env.REACT_APP_UNSPLASH_KEY}`,\n  authDomain: `${process.env.REACT_APP_authDomain}`,\n  projectId: `${process.env.REACT_APP_projectId}`,\n  storageBucket: `${process.env.REACT_APP_storageBucket}`,\n  messagingSenderId: `${process.env.REACT_APP_messagingSenderId}`,\n  appId: `${process.env.REACT_APP_appId}`,\n  measurementId: `${process.env.REACT_APP_measurementId}`\n};\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addtionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapShotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/KIIT/Desktop/React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_UNSPLASH_KEY","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","createUserProfileDocument","userAuth","addtionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapShotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: `${process.env.REACT_APP_UNSPLASH_KEY}`,\r\n    authDomain: `${process.env.REACT_APP_authDomain}`,\r\n    projectId: `${process.env.REACT_APP_projectId}`,\r\n    storageBucket: `${process.env.REACT_APP_storageBucket}`,\r\n    messagingSenderId: `${process.env.REACT_APP_messagingSenderId}`,\r\n    appId: `${process.env.REACT_APP_appId}`,\r\n    measurementId: `${process.env.REACT_APP_measurementId}`\r\n};\r\n\r\n\r\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\r\n    if(!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    const snapshot = await userRef.get();\r\n    if(!snapshot.exists){\r\n        const { displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            await userRef.set({\r\n               displayName,\r\n               email,\r\n               createdAt,\r\n               ...addtionalData\r\n            })\r\n        }catch(error){\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef= collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapShotToMap = collectionsSnapshot => {\r\n    const transformedCollection = collectionsSnapshot.docs.map( docSnapshot => {\r\n        const { title, items } = docSnapshot.data();\r\n\r\n        return{\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: docSnapshot.id,\r\n            title,\r\n            items\r\n        };\r\n    });\r\n    \r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {});\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}